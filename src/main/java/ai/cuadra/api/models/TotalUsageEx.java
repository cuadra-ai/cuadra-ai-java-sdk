/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package ai.cuadra.api.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.Map;

/**
 * This is a model class for TotalUsageEx type.
 */
public class TotalUsageEx {
    private Long totalInput;
    private Long totalOutput;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public TotalUsageEx() {
    }

    /**
     * Initialization constructor.
     * @param  totalInput  Long value for totalInput.
     * @param  totalOutput  Long value for totalOutput.
     */
    public TotalUsageEx(
            Long totalInput,
            Long totalOutput) {
        this.totalInput = totalInput;
        this.totalOutput = totalOutput;
    }

    /**
     * Getter for TotalInput.
     * Total Input Tokens used for this month
     * @return Returns the Long
     */
    @JsonGetter("totalInput")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getTotalInput() {
        return totalInput;
    }

    /**
     * Setter for TotalInput.
     * Total Input Tokens used for this month
     * @param totalInput Value for Long
     */
    @JsonSetter("totalInput")
    public void setTotalInput(Long totalInput) {
        this.totalInput = totalInput;
    }

    /**
     * Getter for TotalOutput.
     * Total Ouput Tokens used for this month
     * @return Returns the Long
     */
    @JsonGetter("totalOutput")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getTotalOutput() {
        return totalOutput;
    }

    /**
     * Setter for TotalOutput.
     * Total Ouput Tokens used for this month
     * @param totalOutput Value for Long
     */
    @JsonSetter("totalOutput")
    public void setTotalOutput(Long totalOutput) {
        this.totalOutput = totalOutput;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this TotalUsageEx into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TotalUsageEx [" + "totalInput=" + totalInput + ", totalOutput=" + totalOutput
                + ", additionalProperties=" + additionalProperties + "]";
    }

    /**
     * Builds a new {@link TotalUsageEx.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TotalUsageEx.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .totalInput(getTotalInput())
                .totalOutput(getTotalOutput());
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link TotalUsageEx}.
     */
    public static class Builder {
        private Long totalInput;
        private Long totalOutput;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();



        /**
         * Setter for totalInput.
         * @param  totalInput  Long value for totalInput.
         * @return Builder
         */
        public Builder totalInput(Long totalInput) {
            this.totalInput = totalInput;
            return this;
        }

        /**
         * Setter for totalOutput.
         * @param  totalOutput  Long value for totalOutput.
         * @return Builder
         */
        public Builder totalOutput(Long totalOutput) {
            this.totalOutput = totalOutput;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link TotalUsageEx} object using the set fields.
         * @return {@link TotalUsageEx}
         */
        public TotalUsageEx build() {
            TotalUsageEx model =
                    new TotalUsageEx(totalInput, totalOutput);
            model.additionalProperties = additionalProperties;
            return model;
        }
    }
}
