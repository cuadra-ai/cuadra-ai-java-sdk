/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package ai.cuadra.api.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.Map;

/**
 * This is a model class for InlineDataEx type.
 */
public class InlineDataEx {
    private String mimeType;
    private String data;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public InlineDataEx() {
    }

    /**
     * Initialization constructor.
     * @param  mimeType  String value for mimeType.
     * @param  data  String value for data.
     */
    public InlineDataEx(
            String mimeType,
            String data) {
        this.mimeType = mimeType;
        this.data = data;
    }

    /**
     * Getter for MimeType.
     * @return Returns the String
     */
    @JsonGetter("mimeType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getMimeType() {
        return mimeType;
    }

    /**
     * Setter for MimeType.
     * @param mimeType Value for String
     */
    @JsonSetter("mimeType")
    public void setMimeType(String mimeType) {
        this.mimeType = mimeType;
    }

    /**
     * Getter for Data.
     * @return Returns the String
     */
    @JsonGetter("data")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getData() {
        return data;
    }

    /**
     * Setter for Data.
     * @param data Value for String
     */
    @JsonSetter("data")
    public void setData(String data) {
        this.data = data;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this InlineDataEx into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "InlineDataEx [" + "mimeType=" + mimeType + ", data=" + data
                + ", additionalProperties=" + additionalProperties + "]";
    }

    /**
     * Builds a new {@link InlineDataEx.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link InlineDataEx.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .mimeType(getMimeType())
                .data(getData());
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link InlineDataEx}.
     */
    public static class Builder {
        private String mimeType;
        private String data;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();



        /**
         * Setter for mimeType.
         * @param  mimeType  String value for mimeType.
         * @return Builder
         */
        public Builder mimeType(String mimeType) {
            this.mimeType = mimeType;
            return this;
        }

        /**
         * Setter for data.
         * @param  data  String value for data.
         * @return Builder
         */
        public Builder data(String data) {
            this.data = data;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link InlineDataEx} object using the set fields.
         * @return {@link InlineDataEx}
         */
        public InlineDataEx build() {
            InlineDataEx model =
                    new InlineDataEx(mimeType, data);
            model.additionalProperties = additionalProperties;
            return model;
        }
    }
}
