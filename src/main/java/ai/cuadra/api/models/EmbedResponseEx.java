/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package ai.cuadra.api.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.Map;

/**
 * This is a model class for EmbedResponseEx type.
 */
public class EmbedResponseEx {
    private String id;
    private UsageEx usage;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public EmbedResponseEx() {
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  usage  UsageEx value for usage.
     */
    public EmbedResponseEx(
            String id,
            UsageEx usage) {
        this.id = id;
        this.usage = usage;
    }

    /**
     * Getter for Id.
     * Embed id
     * @return Returns the String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Embed id
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Usage.
     * This is the token usage result of your request
     * @return Returns the UsageEx
     */
    @JsonGetter("usage")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public UsageEx getUsage() {
        return usage;
    }

    /**
     * Setter for Usage.
     * This is the token usage result of your request
     * @param usage Value for UsageEx
     */
    @JsonSetter("usage")
    public void setUsage(UsageEx usage) {
        this.usage = usage;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this EmbedResponseEx into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "EmbedResponseEx [" + "id=" + id + ", usage=" + usage + ", additionalProperties="
                + additionalProperties + "]";
    }

    /**
     * Builds a new {@link EmbedResponseEx.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link EmbedResponseEx.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .id(getId())
                .usage(getUsage());
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link EmbedResponseEx}.
     */
    public static class Builder {
        private String id;
        private UsageEx usage;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();



        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for usage.
         * @param  usage  UsageEx value for usage.
         * @return Builder
         */
        public Builder usage(UsageEx usage) {
            this.usage = usage;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link EmbedResponseEx} object using the set fields.
         * @return {@link EmbedResponseEx}
         */
        public EmbedResponseEx build() {
            EmbedResponseEx model =
                    new EmbedResponseEx(id, usage);
            model.additionalProperties = additionalProperties;
            return model;
        }
    }
}
