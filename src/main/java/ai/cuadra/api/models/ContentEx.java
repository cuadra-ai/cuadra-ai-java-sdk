/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package ai.cuadra.api.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.Map;

/**
 * This is a model class for ContentEx type.
 */
public class ContentEx {
    private String text;
    private InlineDataEx inlineData;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public ContentEx() {
    }

    /**
     * Initialization constructor.
     * @param  text  String value for text.
     * @param  inlineData  InlineDataEx value for inlineData.
     */
    public ContentEx(
            String text,
            InlineDataEx inlineData) {
        this.text = text;
        this.inlineData = inlineData;
    }

    /**
     * Getter for Text.
     * Text is the task you want the AI to solve.
     * @return Returns the String
     */
    @JsonGetter("text")
    public String getText() {
        return text;
    }

    /**
     * Setter for Text.
     * Text is the task you want the AI to solve.
     * @param text Value for String
     */
    @JsonSetter("text")
    public void setText(String text) {
        this.text = text;
    }

    /**
     * Getter for InlineData.
     * Input Reference is the name of the file, if you're request is from a type other than text,
     * and it's required for most types. It has to contain the same name as the file attached in the
     * request.
     * @return Returns the InlineDataEx
     */
    @JsonGetter("inlineData")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public InlineDataEx getInlineData() {
        return inlineData;
    }

    /**
     * Setter for InlineData.
     * Input Reference is the name of the file, if you're request is from a type other than text,
     * and it's required for most types. It has to contain the same name as the file attached in the
     * request.
     * @param inlineData Value for InlineDataEx
     */
    @JsonSetter("inlineData")
    public void setInlineData(InlineDataEx inlineData) {
        this.inlineData = inlineData;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this ContentEx into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ContentEx [" + "text=" + text + ", inlineData=" + inlineData
                + ", additionalProperties=" + additionalProperties + "]";
    }

    /**
     * Builds a new {@link ContentEx.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ContentEx.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(text)
                .inlineData(getInlineData());
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link ContentEx}.
     */
    public static class Builder {
        private String text;
        private InlineDataEx inlineData;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  text  String value for text.
         */
        public Builder(String text) {
            this.text = text;
        }

        /**
         * Setter for text.
         * @param  text  String value for text.
         * @return Builder
         */
        public Builder text(String text) {
            this.text = text;
            return this;
        }

        /**
         * Setter for inlineData.
         * @param  inlineData  InlineDataEx value for inlineData.
         * @return Builder
         */
        public Builder inlineData(InlineDataEx inlineData) {
            this.inlineData = inlineData;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link ContentEx} object using the set fields.
         * @return {@link ContentEx}
         */
        public ContentEx build() {
            ContentEx model =
                    new ContentEx(text, inlineData);
            model.additionalProperties = additionalProperties;
            return model;
        }
    }
}
