/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package ai.cuadra.api.models;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import io.apimatic.core.types.AdditionalProperties;
import io.apimatic.core.utilities.ConversionHelper;
import java.util.List;
import java.util.Map;

/**
 * This is a model class for Embed type.
 */
public class Embed {
    private String model;
    private List<ContentEx> content;
    private String purpose;
    private AdditionalProperties<Object> additionalProperties = 
            new AdditionalProperties<Object>(this.getClass());

    /**
     * Default constructor.
     */
    public Embed() {
    }

    /**
     * Initialization constructor.
     * @param  model  String value for model.
     * @param  content  List of ContentEx value for content.
     * @param  purpose  String value for purpose.
     */
    public Embed(
            String model,
            List<ContentEx> content,
            String purpose) {
        this.model = model;
        this.content = content;
        this.purpose = purpose;
    }

    /**
     * Getter for Model.
     * Model name
     * @return Returns the String
     */
    @JsonGetter("model")
    public String getModel() {
        return model;
    }

    /**
     * Setter for Model.
     * Model name
     * @param model Value for String
     */
    @JsonSetter("model")
    public void setModel(String model) {
        this.model = model;
    }

    /**
     * Getter for Content.
     * Request content
     * @return Returns the List of ContentEx
     */
    @JsonGetter("content")
    public List<ContentEx> getContent() {
        return content;
    }

    /**
     * Setter for Content.
     * Request content
     * @param content Value for List of ContentEx
     */
    @JsonSetter("content")
    public void setContent(List<ContentEx> content) {
        this.content = content;
    }

    /**
     * Getter for Purpose.
     * The purpose of the embed, it could be 'search_document', 'search_query', 'classification', o
     * 'clustering'.
     * @return Returns the String
     */
    @JsonGetter("purpose")
    public String getPurpose() {
        return purpose;
    }

    /**
     * Setter for Purpose.
     * The purpose of the embed, it could be 'search_document', 'search_query', 'classification', o
     * 'clustering'.
     * @param purpose Value for String
     */
    @JsonSetter("purpose")
    public void setPurpose(String purpose) {
        this.purpose = purpose;
    }

    /**
     * Hidden method for the serialization of additional properties.
     * @return The map of additionally set properties.
     */
    @JsonAnyGetter
    private Map<String, Object> getAdditionalProperties() {
        return additionalProperties.getAdditionalProperties();
    }

    /**
     * Hidden method for the de-serialization of additional properties.
     * @param name The name of the additional property.
     * @param value The Object value of the additional property.
     */
    @JsonAnySetter
    private void setAdditionalProperties(String name, Object value) {
        additionalProperties.setAdditionalProperty(name,
                ConversionHelper.convertToSimpleType(value,
                        x -> x),
                true);
    }

    /**
     * Getter for the value of additional properties based on provided property name.
     * @param name The name of the additional property.
     * @return Either the Object property value or null if not exist.
     */
    
    public Object getAdditionalProperty(String name) {
        return additionalProperties.getAdditionalProperty(name);
    }

    /**
     * Converts this Embed into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Embed [" + "model=" + model + ", content=" + content + ", purpose=" + purpose
                + ", additionalProperties=" + additionalProperties + "]";
    }

    /**
     * Builds a new {@link Embed.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Embed.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(model, content, purpose);
        builder.additionalProperties = additionalProperties;
        return builder;
    }

    /**
     * Class to build instances of {@link Embed}.
     */
    public static class Builder {
        private String model;
        private List<ContentEx> content;
        private String purpose;
        private AdditionalProperties<Object> additionalProperties =
                new AdditionalProperties<Object>();

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  model  String value for model.
         * @param  content  List of ContentEx value for content.
         * @param  purpose  String value for purpose.
         */
        public Builder(String model, List<ContentEx> content, String purpose) {
            this.model = model;
            this.content = content;
            this.purpose = purpose;
        }

        /**
         * Setter for model.
         * @param  model  String value for model.
         * @return Builder
         */
        public Builder model(String model) {
            this.model = model;
            return this;
        }

        /**
         * Setter for content.
         * @param  content  List of ContentEx value for content.
         * @return Builder
         */
        public Builder content(List<ContentEx> content) {
            this.content = content;
            return this;
        }

        /**
         * Setter for purpose.
         * @param  purpose  String value for purpose.
         * @return Builder
         */
        public Builder purpose(String purpose) {
            this.purpose = purpose;
            return this;
        }

        /**
         * Setter for additional property that are not in model fields.
         * @param name The name of the additional property.
         * @param value The Object value of the additional property.
         * @return Builder.
         */
        public Builder additionalProperty(String name, Object value) {
            this.additionalProperties.setAdditionalProperty(name, value);
            return this;
        }

        /**
         * Builds a new {@link Embed} object using the set fields.
         * @return {@link Embed}
         */
        public Embed build() {
            Embed model2 =
                    new Embed(model, content, purpose);
            model2.additionalProperties = additionalProperties;
            return model2;
        }
    }
}
