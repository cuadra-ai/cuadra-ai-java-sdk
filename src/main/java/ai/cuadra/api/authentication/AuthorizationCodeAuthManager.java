/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package ai.cuadra.api.authentication;

import ai.cuadra.api.ApiHelper;
import ai.cuadra.api.AuthorizationCodeAuth;
import ai.cuadra.api.Server;
import ai.cuadra.api.controllers.OauthAuthorizationController;
import ai.cuadra.api.exceptions.ApiException;
import ai.cuadra.api.models.OauthToken;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.core.authentication.HeaderAuth;
import io.apimatic.coreinterfaces.http.request.ArraySerializationFormat;
import java.io.IOException;
import java.util.Base64;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * Utility class for OAuth 2 authorization and token management.
 */
public class AuthorizationCodeAuthManager extends HeaderAuth implements AuthorizationCodeAuth {

    /**
     * Private instance of OAuth 2 API controller.
     */
    private OauthAuthorizationController oAuthApi;

    /**
     * Private instance of the configuration to be used.
     */
    private GlobalConfiguration config;

    /**
     * Private instance of the auth model containing the auth credentials.
     */
    private AuthorizationCodeAuthModel authModel;

    /**
     * Constructor.
     */
    public AuthorizationCodeAuthManager(AuthorizationCodeAuthModel authModel) {
        super(Collections.singletonMap("Authorization",
                getAuthorizationHeader(authModel.getOauthToken())));
        this.authModel = authModel;
    }

    /**
    * Apply GlobalConfiguration for token management.
    * @param config GlobalConfiguration instance
    */
    public void applyGlobalConfiguration(GlobalConfiguration config) {
        this.config = config;
        this.oAuthApi = new OauthAuthorizationController(config);
    }


    /**
     * String value for oauthClientId.
     * @return oauthClientId
     */
    public String getOauthClientId() {
        return authModel.getOauthClientId();
    }

    /**
     * String value for oauthClientSecret.
     * @return oauthClientSecret
     */
    public String getOauthClientSecret() {
        return authModel.getOauthClientSecret();
    }

    /**
     * String value for oauthRedirectUri.
     * @return oauthRedirectUri
     */
    public String getOauthRedirectUri() {
        return authModel.getOauthRedirectUri();
    }

    /**
     * OauthToken value for oauthToken.
     * @return oauthToken
     */
    public OauthToken getOauthToken() {
        return authModel.getOauthToken();
    }

    /**
     * Checks if provided credentials matched with existing ones.
     * @param oauthClientId String value for credentials.
     * @param oauthClientSecret String value for credentials.
     * @param oauthRedirectUri String value for credentials.
     * @param oauthToken OauthToken value for credentials.
     * @return true if credentials matched.
     */
    public boolean equals(String oauthClientId, String oauthClientSecret, String oauthRedirectUri,
            OauthToken oauthToken) {
        return oauthClientId.equals(getOauthClientId())
                && oauthClientSecret.equals(getOauthClientSecret())
                && oauthRedirectUri.equals(getOauthRedirectUri())
                && ((getOauthToken() == null && oauthToken == null)
                        || (getOauthToken() != null && oauthToken != null
                                && oauthToken.toString().equals(getOauthToken().toString())));
    }

    /**
     * Converts this AuthorizationCodeAuthManager into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "AuthorizationCodeAuthManager [" + "oauthClientId=" + getOauthClientId()
                + ", oauthClientSecret=" + getOauthClientSecret() + ", oauthRedirectUri="
                + getOauthRedirectUri() + ", oauthToken=" + getOauthToken() + "]";
    }

    /**
     * Build an authorization URL for taking the user's consent to access data.
     * @param state An opaque state string.
     * @param additionalParameters Additional parameters to add the the authorization URL.
     * @return Authorization URL
     */
    public String buildAuthorizationUrl(final String state,
            final Map<String, String> additionalParameters) {

        // the uri for api requests
        StringBuilder queryBuilder = new StringBuilder(config.getBaseUri().apply(Server.AUTH_SERVER.value()));
        queryBuilder.append("/authorize");

        // build query params
        Map<String, Object> queryParameters = new HashMap<String, Object>() {
            private static final long serialVersionUID = 1L;
            {
                put("response_type", "code");
                put("client_id", getOauthClientId());
                put("redirect_uri", getOauthRedirectUri());
                put("state", state);
            }
        };

        // process optional query parameters
        if (additionalParameters != null) {
            queryParameters.putAll(additionalParameters);
        }

        ApiHelper.appendUrlWithQueryParameters(queryBuilder, queryParameters, ArraySerializationFormat.INDEXED);

        // validate and preprocess url
        return ApiHelper.cleanUrl(queryBuilder);
    }
    
    /**
     * Build an authorization URL for taking the user's consent to access data.
     * @return Authorization URL
     */
    public String buildAuthorizationUrl() {
        return buildAuthorizationUrl(null, null);
    }

    /**
     * Build an authorization URL for taking the user's consent to access data.
     * @param state An opaque state string.
     * @return Authorization URL
     */
    public String buildAuthorizationUrl(final String state) {
        return buildAuthorizationUrl(state, null);
    }

    /**
     * Fetch the OAuth token asynchronously.
     * @param authorizationCode Authorization code returned by the OAuth provider.
     * @param additionalParameters Additional parameters to send during authorization.
     */
    public CompletableFuture<OauthToken> fetchTokenAsync(final String authorizationCode,
            final Map<String, Object> additionalParameters) {
        final Map<String, Object> aparams =
                additionalParameters == null ? new HashMap<String, Object>() : additionalParameters;
        return oAuthApi.requestTokenAsync(
            getBasicAuthForClient(),
            authorizationCode,
            getOauthRedirectUri(),
            aparams).thenApply(result -> {
                OauthToken token = result.getResult();
                Long expiresIn = token.getExpiresIn();
                if (expiresIn != null && expiresIn != 0) {
                    token.setExpiry((System.currentTimeMillis() / 1000L) + token.getExpiresIn());
                }
                return token;
            });
    }

    /**
     * Fetch the OAuth token asynchronously.
     * @param authorizationCode Authorization code returned by the OAuth provider.
     */
    public CompletableFuture<OauthToken> fetchTokenAsync(final String authorizationCode) {
        return fetchTokenAsync(authorizationCode, null);
    }

    /**
     * Fetch the OAuth token.
     * @param authorizationCode Authorization code returned by the OAuth provider.
     * @param additionalParameters Additional parameters to send during authorization.
     */
    public OauthToken fetchToken(String authorizationCode, Map<String, Object> additionalParameters)
            throws ApiException, IOException {
        final Map<String, Object> aparams =
                additionalParameters == null ? new HashMap<String, Object>() : additionalParameters;
        OauthToken token = oAuthApi.requestToken(
            getBasicAuthForClient(),
            authorizationCode,
            getOauthRedirectUri(),
            aparams).getResult();

        if (token.getExpiresIn() != null && token.getExpiresIn() != 0) {
            token.setExpiry((System.currentTimeMillis() / 1000L) + token.getExpiresIn());
        }

        return token;
    }

    /**
     * Fetch the OAuth token.
     * @param authorizationCode Authorization code returned by the OAuth provider
     */
    public OauthToken fetchToken(String authorizationCode) throws ApiException, IOException {
        return fetchToken(authorizationCode, null);
    }

    /**
     * Refresh the OAuth token.
     * @param additionalParameters Additional parameters to send during token refresh.
     */
    public CompletableFuture<OauthToken> refreshTokenAsync(
            final Map<String, Object> additionalParameters) {

        final Map<String, Object> aparams =
                additionalParameters == null ? new HashMap<String, Object>() : additionalParameters;
        return oAuthApi.refreshTokenAsync(
            getBasicAuthForClient(),
            getOauthToken().getRefreshToken(),
            null,
            aparams).thenApply(token -> {
                return token.getResult();
            });
    }

    /**
     * Refresh the OAuth token.
     */
    public CompletableFuture<OauthToken> refreshTokenAsync() {
        return refreshTokenAsync(null);
    }

    /**
     * Refresh the OAuth token.
     * @param additionalParameters Additional parameters to send during token refresh.
     */
    public OauthToken refreshToken(final Map<String, Object> additionalParameters)
            throws ApiException, IOException {
        final Map<String, Object> aparams =
                additionalParameters == null ? new HashMap<String, Object>() : additionalParameters;
        OauthToken token = oAuthApi.refreshToken(
            getBasicAuthForClient(),
            getOauthToken().getRefreshToken(),
            null,
            aparams).getResult();
        return token;
    }

    /**
     * Refresh the OAuth token.
     */
    public OauthToken refreshToken() throws ApiException, IOException {
        return refreshToken(null);
    }

    /**
     * Build authorization header value for basic auth.
     * @return Authorization header value for this client
     */
    private String getBasicAuthForClient() {
        String val = getOauthClientId() + ":" + getOauthClientSecret();
        return "Basic " + new String(Base64.getEncoder().encodeToString(val.getBytes()));
    }


    /**
     * Has the OAuth token expired?.
     * @return True if expired
     */
    public boolean isTokenExpired() {
        if (getOauthToken() == null) {
            throw new IllegalStateException("OAuth token is missing.");
        }

        return getOauthToken().getExpiry() != null 
            && getOauthToken().getExpiry() < (System.currentTimeMillis() / 1000L); 
    }

    /**
    * Create authorization header for API calls.
    * @param token OAuth token
    * @return Authorization header
    */
    private static String getAuthorizationHeader(OauthToken token) {
        if (token == null) {
            return null;
        }
        return "Bearer " + token.getAccessToken();
    }

    /**
    * Validate the authentication on the httpRequest
    */
    @Override
    public void validate() {
        if (getOauthToken() == null) {
            setErrorMessage("Client is not authorized."
                + " An OAuth token is needed to make API calls.");
            setValidity(false);
        } else if (isTokenExpired()) {
            setErrorMessage("The oAuth token is expired."
                + " A valid token is needed to make API calls.");
            setValidity(false);
        } else {
            setValidity(true);
        }
     }

    /**
    * Returns the error message if the auth credentials are not valid.
    * @return the auth specific error message.
    */
    @Override
    public String getErrorMessage() {
        String errorMessage = super.getErrorMessage();
        if (errorMessage == null) {
            return null;
        }

        return "AuthorizationCodeAuth - " + errorMessage;
    }

}
