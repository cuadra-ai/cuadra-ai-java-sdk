/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package ai.cuadra.api.controllers;

import ai.cuadra.api.ApiHelper;
import ai.cuadra.api.Server;
import ai.cuadra.api.exceptions.ApiException;
import ai.cuadra.api.exceptions.ErrorResponseException;
import ai.cuadra.api.http.request.HttpMethod;
import ai.cuadra.api.http.response.ApiResponse;
import ai.cuadra.api.models.Chat;
import ai.cuadra.api.models.TotalUsageEx;
import ai.cuadra.api.models.UsageCalculationEx;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class UsageController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public UsageController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * This endpoint allows you to calculate the usage, so you get an idea of the amount of tokens
     * that will be consumed.
     * @param  body  Required parameter:
     * @return    Returns the UsageCalculationEx wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<UsageCalculationEx> calculateTokens(
            final Chat body) throws ApiException, IOException {
        return prepareCalculateTokensRequest(body).execute();
    }

    /**
     * This endpoint allows you to calculate the usage, so you get an idea of the amount of tokens
     * that will be consumed.
     * @param  body  Required parameter:
     * @return    Returns the UsageCalculationEx wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<UsageCalculationEx>> calculateTokensAsync(
            final Chat body) {
        try {
            return prepareCalculateTokensRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for calculateTokens.
     */
    private ApiCall<ApiResponse<UsageCalculationEx>, ApiException> prepareCalculateTokensRequest(
            final Chat body) {
        return new ApiCall.Builder<ApiResponse<UsageCalculationEx>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/usage/tokenize")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("OAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, UsageCalculationEx.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request, read again our documentation or contact support for guidance.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Not authorized, check our OAuth2 doc.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal error, if this error persist, please contact support.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint calculates the amount of tokens used by the user in the given month.
     * @return    Returns the TotalUsageEx wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<TotalUsageEx> totalUsage() throws ApiException, IOException {
        return prepareTotalUsageRequest().execute();
    }

    /**
     * This endpoint calculates the amount of tokens used by the user in the given month.
     * @return    Returns the TotalUsageEx wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<TotalUsageEx>> totalUsageAsync() {
        try {
            return prepareTotalUsageRequest().executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for totalUsage.
     */
    private ApiCall<ApiResponse<TotalUsageEx>, ApiException> prepareTotalUsageRequest() {
        return new ApiCall.Builder<ApiResponse<TotalUsageEx>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/usage/totals")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("OAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, TotalUsageEx.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request, read again our documentation or contact support for guidance.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Not authorized, check our OAuth2 doc.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal error, if this error persist, please contact support.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}