/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package ai.cuadra.api.controllers;

import ai.cuadra.api.ApiHelper;
import ai.cuadra.api.Server;
import ai.cuadra.api.exceptions.ApiException;
import ai.cuadra.api.exceptions.ErrorResponseException;
import ai.cuadra.api.http.request.HttpMethod;
import ai.cuadra.api.http.response.ApiResponse;
import ai.cuadra.api.models.ModelEx;
import ai.cuadra.api.models.PaginatedResponseExListModelEx;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.ResponseClassType;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ModelsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public ModelsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * This endpoint display all of our AI models.
     * @param  page  Optional parameter:
     * @param  size  Optional parameter:
     * @return    Returns the PaginatedResponseExListModelEx wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<PaginatedResponseExListModelEx> getModels(
            final Integer page,
            final Integer size) throws ApiException, IOException {
        return prepareGetModelsRequest(page, size).execute();
    }

    /**
     * This endpoint display all of our AI models.
     * @param  page  Optional parameter:
     * @param  size  Optional parameter:
     * @return    Returns the PaginatedResponseExListModelEx wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<PaginatedResponseExListModelEx>> getModelsAsync(
            final Integer page,
            final Integer size) {
        try {
            return prepareGetModelsRequest(page, size).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for getModels.
     */
    private ApiCall<ApiResponse<PaginatedResponseExListModelEx>, ApiException> prepareGetModelsRequest(
            final Integer page,
            final Integer size) {
        return new ApiCall.Builder<ApiResponse<PaginatedResponseExListModelEx>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/model")
                        .queryParam(param -> param.key("page")
                                .value(page).isRequired(false))
                        .queryParam(param -> param.key("size")
                                .value(size).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("OAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, PaginatedResponseExListModelEx.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request, read again our documentation or contact support for guidance.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Not authorized, check our OAuth2 doc.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal error, if this error persist, please contact support.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint creates a new custom Model for you to train and use.
     * @param  body  Required parameter:
     * @return    Returns the ModelEx wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ModelEx> createModel(
            final ModelEx body) throws ApiException, IOException {
        return prepareCreateModelRequest(body).execute();
    }

    /**
     * This endpoint creates a new custom Model for you to train and use.
     * @param  body  Required parameter:
     * @return    Returns the ModelEx wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ModelEx>> createModelAsync(
            final ModelEx body) {
        try {
            return prepareCreateModelRequest(body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for createModel.
     */
    private ApiCall<ApiResponse<ModelEx>, ApiException> prepareCreateModelRequest(
            final ModelEx body) {
        return new ApiCall.Builder<ApiResponse<ModelEx>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/model")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("OAuth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ModelEx.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request, read again our documentation or contact support for guidance.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Not authorized, check our OAuth2 doc.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal error, if this error persist, please contact support.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint shows you information about a particular model given an id.
     * @param  id  Required parameter:
     * @return    Returns the ModelEx wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ModelEx> getModel(
            final String id) throws ApiException, IOException {
        return prepareGetModelRequest(id).execute();
    }

    /**
     * This endpoint shows you information about a particular model given an id.
     * @param  id  Required parameter:
     * @return    Returns the ModelEx wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ModelEx>> getModelAsync(
            final String id) {
        try {
            return prepareGetModelRequest(id).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for getModel.
     */
    private ApiCall<ApiResponse<ModelEx>, ApiException> prepareGetModelRequest(
            final String id) {
        return new ApiCall.Builder<ApiResponse<ModelEx>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/model/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("OAuth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ModelEx.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request, read again our documentation or contact support for guidance.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Not authorized, check our OAuth2 doc.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal error, if this error persist, please contact support.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint removes a custom model you created.
     * @param  id  Required parameter:
     * @return    Returns the ModelEx wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ModelEx> removeModel(
            final String id) throws ApiException, IOException {
        return prepareRemoveModelRequest(id).execute();
    }

    /**
     * This endpoint removes a custom model you created.
     * @param  id  Required parameter:
     * @return    Returns the ModelEx wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ModelEx>> removeModelAsync(
            final String id) {
        try {
            return prepareRemoveModelRequest(id).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for removeModel.
     */
    private ApiCall<ApiResponse<ModelEx>, ApiException> prepareRemoveModelRequest(
            final String id) {
        return new ApiCall.Builder<ApiResponse<ModelEx>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/model/{id}")
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("OAuth2"))
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ModelEx.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request, read again our documentation or contact support for guidance.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Not authorized, check our OAuth2 doc.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal error, if this error persist, please contact support.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * This endpoint updates a custom model you created.
     * @param  id  Required parameter:
     * @param  body  Required parameter:
     * @return    Returns the ModelEx wrapped in ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse<ModelEx> updateModel(
            final String id,
            final ModelEx body) throws ApiException, IOException {
        return prepareUpdateModelRequest(id, body).execute();
    }

    /**
     * This endpoint updates a custom model you created.
     * @param  id  Required parameter:
     * @param  body  Required parameter:
     * @return    Returns the ModelEx wrapped in ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse<ModelEx>> updateModelAsync(
            final String id,
            final ModelEx body) {
        try {
            return prepareUpdateModelRequest(id, body).executeAsync();
        } catch (Exception e) {
            throw new CompletionException(e);
        }
    }

    /**
     * Builds the ApiCall object for updateModel.
     */
    private ApiCall<ApiResponse<ModelEx>, ApiException> prepareUpdateModelRequest(
            final String id,
            final ModelEx body) {
        return new ApiCall.Builder<ApiResponse<ModelEx>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/model/{id}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("OAuth2"))
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .responseClassType(ResponseClassType.API_RESPONSE)
                        .apiResponseDeserializer(
                                response -> ApiHelper.deserialize(response, ModelEx.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Bad request, read again our documentation or contact support for guidance.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Not authorized, check our OAuth2 doc.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("Internal error, if this error persist, please contact support.",
                                (reason, context) -> new ErrorResponseException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}