/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package ai.cuadra.api;

import ai.cuadra.api.exceptions.ApiException;
import ai.cuadra.api.models.OauthToken;
import java.io.IOException;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * Interface for Authorization Code OAuth 2.
 */
public interface AuthorizationCodeAuth {

    /**
     * String value for oauthClientId.
     * @return oauthClientId
     */
    String getOauthClientId();

    /**
     * String value for oauthClientSecret.
     * @return oauthClientSecret
     */
    String getOauthClientSecret();

    /**
     * String value for oauthRedirectUri.
     * @return oauthRedirectUri
     */
    String getOauthRedirectUri();

    /**
     * OauthToken value for oauthToken.
     * @return oauthToken
     */
    OauthToken getOauthToken();

    /**
     * Checks if provided credentials matched with existing ones.
     * @param oauthClientId String value for credentials.
     * @param oauthClientSecret String value for credentials.
     * @param oauthRedirectUri String value for credentials.
     * @param oauthToken OauthToken value for credentials.
     * @return true if credentials matched.
     */
    boolean equals(String oauthClientId, String oauthClientSecret, String oauthRedirectUri,
            OauthToken oauthToken);

    /**
     * Build an authorization URL for taking the user's consent to access data.
     * @param state An opaque state string.
     * @param additionalParameters Additional parameters to add the the authorization URL.
     * @return Authorization URL
     */
    String buildAuthorizationUrl(final String state,
            final Map<String, String> additionalParameters);
    
    /**
     * Build an authorization URL for taking the user's consent to access data.
     * @return Authorization URL
     */
    String buildAuthorizationUrl();

    /**
     * Build an authorization URL for taking the user's consent to access data.
     * @param state An opaque state string.
     * @return Authorization URL
     */
    String buildAuthorizationUrl(final String state);

    /**
     * Fetch the OAuth token asynchronously.
     * @param authorizationCode Authorization code returned by the OAuth provider.
     * @param additionalParameters Additional parameters to send during authorization.
     */
    CompletableFuture<OauthToken> fetchTokenAsync(final String authorizationCode,
            final Map<String, Object> additionalParameters);

    /**
     * Fetch the OAuth token asynchronously.
     * @param authorizationCode Authorization code returned by the OAuth provider.
     */
    CompletableFuture<OauthToken> fetchTokenAsync(final String authorizationCode);

    /**
     * Fetch the OAuth token.
     * @param authorizationCode Authorization code returned by the OAuth provider.
     * @param additionalParameters Additional parameters to send during authorization.
     */
    OauthToken fetchToken(String authorizationCode,
            Map<String, Object> additionalParameters) throws ApiException, IOException;

    /**
     * Fetch the OAuth token.
     * @param authorizationCode Authorization code returned by the OAuth provider
     */
    OauthToken fetchToken(String authorizationCode) throws ApiException, IOException;

    /**
     * Refresh the OAuth token.
     * @param additionalParameters Additional parameters to send during token refresh.
     */
    CompletableFuture<OauthToken> refreshTokenAsync(final Map<String, Object> additionalParameters);

    /**
     * Refresh the OAuth token.
     */
    CompletableFuture<OauthToken> refreshTokenAsync();

    /**
     * Refresh the OAuth token.
     * @param additionalParameters Additional parameters to send during token refresh.
     */
    OauthToken refreshToken(final Map<String, Object> additionalParameters) 
            throws ApiException, IOException;

    /**
     * Refresh the OAuth token.
     */
    OauthToken refreshToken() throws ApiException, IOException;

    /**
     * Has the OAuth token expired?.
     * @return True if expired
     */
    boolean isTokenExpired();

}
