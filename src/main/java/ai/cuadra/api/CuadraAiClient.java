/*
 * CuadraAiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package ai.cuadra.api;

import ai.cuadra.api.authentication.AuthorizationCodeAuthManager;
import ai.cuadra.api.authentication.AuthorizationCodeAuthModel;
import ai.cuadra.api.controllers.ChatController;
import ai.cuadra.api.controllers.EmbedsController;
import ai.cuadra.api.controllers.ModelsController;
import ai.cuadra.api.controllers.OauthAuthorizationController;
import ai.cuadra.api.controllers.UsageController;
import ai.cuadra.api.http.client.HttpCallback;
import ai.cuadra.api.http.client.HttpClientConfiguration;
import ai.cuadra.api.http.client.ReadonlyHttpClientConfiguration;
import ai.cuadra.api.logging.configuration.ApiLoggingConfiguration;
import ai.cuadra.api.logging.configuration.ReadonlyLoggingConfiguration;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.authentication.Authentication;
import io.apimatic.coreinterfaces.compatibility.CompatibilityFactory;
import io.apimatic.coreinterfaces.http.HttpClient;
import io.apimatic.okhttpclient.adapter.OkClient;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Supplier;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class CuadraAiClient implements Configuration {

    /**
     * Private store for controllers.
     */
    private ChatController chat;
    private ModelsController models;
    private EmbedsController embeds;
    private UsageController usage;
    private OauthAuthorizationController oauthAuthorization;

    private static final CompatibilityFactory compatibilityFactory = new CompatibilityFactoryImpl();

    private static String userAgent = "Java-SDK/1.0.3 [OS: {os-info}, Engine: {engine}/{engine-version}]";

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * Logging Configuration instance.
     */
    private final ReadonlyLoggingConfiguration loggingConfig;

    /**
     * AuthorizationCodeAuthManager.
     */
    private AuthorizationCodeAuthManager authorizationCodeAuthManager;

    /**
     * The instance of AuthorizationCodeAuthModel.
     */
    private AuthorizationCodeAuthModel authorizationCodeAuthModel;

    /**
     * Map of authentication Managers.
     */
    private Map<String, Authentication> authentications = new HashMap<String, Authentication>();

    /**
     * Callback to be called before and after the HTTP call for an endpoint is made.
     */
    private final HttpCallback httpCallback;

    private CuadraAiClient(Environment environment, HttpClient httpClient,
            ReadonlyHttpClientConfiguration httpClientConfig,
            ReadonlyLoggingConfiguration loggingConfig,
            AuthorizationCodeAuthModel authorizationCodeAuthModel, HttpCallback httpCallback) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;
        this.loggingConfig = loggingConfig;
        this.httpCallback = httpCallback;

        this.authorizationCodeAuthModel = authorizationCodeAuthModel;

        this.authorizationCodeAuthManager = new AuthorizationCodeAuthManager(
                authorizationCodeAuthModel);
        this.authentications.put("OAuth2", authorizationCodeAuthManager);

        GlobalConfiguration globalConfig = new GlobalConfiguration.Builder()
                .httpClient(httpClient).baseUri(server -> getBaseUri(server))
                .compatibilityFactory(compatibilityFactory)
                .authentication(this.authentications)
                .callback(httpCallback)
                .userAgent(userAgent)
                .loggingConfiguration(((ApiLoggingConfiguration) loggingConfig).getConfiguration())
                .build();
        this.authorizationCodeAuthManager.applyGlobalConfiguration(globalConfig);

        chat = new ChatController(globalConfig);
        models = new ModelsController(globalConfig);
        embeds = new EmbedsController(globalConfig);
        usage = new UsageController(globalConfig);
        oauthAuthorization = new OauthAuthorizationController(globalConfig);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of ChatController.
     * @return chat
     */
    public ChatController getChatController() {
        return chat;
    }

    /**
     * Get the instance of ModelsController.
     * @return models
     */
    public ModelsController getModelsController() {
        return models;
    }

    /**
     * Get the instance of EmbedsController.
     * @return embeds
     */
    public EmbedsController getEmbedsController() {
        return embeds;
    }

    /**
     * Get the instance of UsageController.
     * @return usage
     */
    public UsageController getUsageController() {
        return usage;
    }

    /**
     * Get the instance of OauthAuthorizationController.
     * @return oauthAuthorization
     */
    public OauthAuthorizationController getOauthAuthorizationController() {
        return oauthAuthorization;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * Logging Configuration instance.
     * @return loggingConfig
     */
    public ReadonlyLoggingConfiguration getLoggingConfig() {
        return loggingConfig;
    }

    /**
     * The credentials to use with AuthorizationCodeAuth.
     * @return authorizationCodeAuth
     */
    public AuthorizationCodeAuth getAuthorizationCodeAuth() {
        return authorizationCodeAuthManager;
    }

    /**
     * The auth credential model for AuthorizationCodeAuth.
     * @return the instance of AuthorizationCodeAuthModel
     */
    public AuthorizationCodeAuthModel getAuthorizationCodeAuthModel() {
        return authorizationCodeAuthModel;
    }
    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        Map<String, SimpleEntry<Object, Boolean>> parameters = new HashMap<>();
        StringBuilder baseUrl = new StringBuilder(environmentMapper(environment, server));
        ApiHelper.appendUrlWithTemplateParameters(baseUrl, parameters);
        return baseUrl.toString();
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.ENUM_DEFAULT);
    }


    /**
     * Get base URI by current environment.
     * 
     * @param server string for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(String server) {
        return getBaseUri(Server.fromString(server));
    }


    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "https://api.cuadra.ai";
            }
            if (server.equals(Server.AUTH_SERVER)) {
                return "https://dguxglyyavnhlugtecgi.supabase.co/auth/v1";
            }
        }
        return "https://api.cuadra.ai";
    }

    /**
     * Converts this CuadraAiClient into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CuadraAiClient [" + "environment=" + environment + ", httpClientConfig="
                + httpClientConfig + ", loggingConfig=" + loggingConfig + ", authentications="
                + authentications + "]";
    }

    /**
     * Builds a new {@link CuadraAiClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link CuadraAiClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.httpClient = getHttpClient();
        builder.authorizationCodeAuth(getAuthorizationCodeAuthModel()
                .toBuilder().build());
        builder.httpCallback = httpCallback;
        builder.httpClientConfig(() -> ((HttpClientConfiguration) httpClientConfig).newBuilder());
        builder.loggingConfig(() -> ((ApiLoggingConfiguration) loggingConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link CuadraAiClient}.
     */
    public static class Builder {

        private Environment environment = Environment.PRODUCTION;
        private HttpClient httpClient;
        private AuthorizationCodeAuthModel authorizationCodeAuthModel =
                new AuthorizationCodeAuthModel.Builder("", "", "").build();
        private HttpCallback httpCallback = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();
        private ApiLoggingConfiguration.Builder loggingConfigBuilder = null;


        /**
         * Credentials setter for AuthorizationCodeAuth.
         * @param authorizationCodeAuthModel The instance of AuthorizationCodeAuthModel.
         * @return The current instance of builder.
         */
        public Builder authorizationCodeAuth(
                AuthorizationCodeAuthModel authorizationCodeAuthModel) {
            this.authorizationCodeAuthModel = authorizationCodeAuthModel;
            return this;
        }

        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * Setter for the Builder of LoggingConfiguration, takes in an operation to be
         * performed on the builder instance of logging configuration.
         * @param action Consumer for the builder of LoggingConfiguration.
         * @return Builder
         */
        public Builder loggingConfig(Consumer<ApiLoggingConfiguration.Builder> action) {
            if (loggingConfigBuilder == null) {
                loggingConfigBuilder = new ApiLoggingConfiguration.Builder();
            }

            if (loggingConfigBuilder.build().getLogger() == null) {
                loggingConfigBuilder.useDefaultLogger();
            }

            action.accept(loggingConfigBuilder);
            return this;
        }

        /**
         * Setter for the Builder of LoggingConfiguration with Console Logging.
         *
         * @return Builder
         */
        public Builder loggingConfig() {
            loggingConfigBuilder = new ApiLoggingConfiguration.Builder();
            loggingConfigBuilder.useDefaultLogger();
            return this;
        }

		/**
		 * Private setter for the Builder of LoggingConfiguration, takes in an operation to be
		 * performed on the builder instance of logging configuration.
		 * 
		 * @param supplier Supplier for the builder of LoggingConfiguration.
		 * @return Builder
		 */
		private Builder loggingConfig(Supplier<ApiLoggingConfiguration.Builder> supplier) {
			loggingConfigBuilder = supplier.get();
			return this;
		}

        /**
         * HttpCallback.
         * @param httpCallback Callback to be called before and after the HTTP call.
         * @return Builder
         */
        public Builder httpCallback(HttpCallback httpCallback) {
            this.httpCallback = httpCallback;
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Private Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param supplier Supplier for the builder of httpClientConfiguration.
         * @return Builder
         */
        private Builder httpClientConfig(Supplier<HttpClientConfiguration.Builder> supplier) {
            httpClientConfigBuilder = supplier.get();
            return this;
        }

        /**
         * Builds a new CuadraAiClient object using the set fields.
         * @return CuadraAiClient
         */
        public CuadraAiClient build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            ReadonlyLoggingConfiguration loggingConfig = loggingConfigBuilder != null ? loggingConfigBuilder.build() 
                    : new ApiLoggingConfiguration.Builder().build();
            httpClient = new OkClient(httpClientConfig.getConfiguration(), compatibilityFactory);

            return new CuadraAiClient(environment, httpClient, httpClientConfig, loggingConfig,
                    authorizationCodeAuthModel, httpCallback);
        }
    }
}